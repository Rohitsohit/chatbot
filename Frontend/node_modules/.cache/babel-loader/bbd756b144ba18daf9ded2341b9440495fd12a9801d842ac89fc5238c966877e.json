{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Documents/Cohere/chatbot/Frontend/src/Components/FileUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport mammoth from 'mammoth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUploader = () => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [fileContents, setFileContents] = useState({});\n  const handleFileChange = async event => {\n    const files = Array.from(event.target.files);\n    setSelectedFiles(files);\n    const contents = {};\n    for (const file of files) {\n      if (file.type === 'application/pdf') {\n        contents[file.name] = await extractTextFromPDF(file);\n      } else if (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        contents[file.name] = await extractTextFromWord(file);\n      }\n    }\n    setFileContents(contents);\n  };\n  const extractTextFromPDF = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const typedarray = new Uint8Array(reader.result);\n        pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n        const pdf = await pdfjsLib.getDocument(typedarray).promise;\n        let text = '';\n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const content = await page.getTextContent();\n          text += content.items.map(item => item.str).join(' ');\n        }\n        resolve(text);\n      };\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n  const extractTextFromWord = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = async event => {\n        const arrayBuffer = event.target.result;\n        try {\n          const result = await mammoth.extractRawText({\n            arrayBuffer\n          });\n          resolve(result.value);\n        } catch (err) {\n          reject(err);\n        }\n      };\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center bg-gray-100 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md w-full bg-white shadow-md rounded-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4\",\n        children: \"Upload Word or PDF Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".doc,.docx,.pdf\",\n        onChange: handleFileChange,\n        className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 mb-4\",\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc list-inside\",\n        children: selectedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"text-gray-700\",\n          children: file.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: Object.entries(fileContents).map(([fileName, content]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold\",\n            children: fileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 whitespace-pre-line\",\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, fileName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploader, \"uvs31vZn1iAVuE4rJWWgdxGoF+Y=\");\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","pdfjsLib","mammoth","jsxDEV","_jsxDEV","FileUploader","_s","selectedFiles","setSelectedFiles","fileContents","setFileContents","handleFileChange","event","files","Array","from","target","contents","file","type","name","extractTextFromPDF","extractTextFromWord","Promise","resolve","reject","reader","FileReader","onload","typedarray","Uint8Array","result","GlobalWorkerOptions","workerSrc","version","pdf","getDocument","promise","text","i","numPages","page","getPage","content","getTextContent","items","map","item","str","join","onerror","readAsArrayBuffer","arrayBuffer","extractRawText","value","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","multiple","index","Object","entries","_c","$RefreshReg$"],"sources":["/Users/rohit/Documents/Cohere/chatbot/Frontend/src/Components/FileUploader.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport mammoth from 'mammoth';\n\nconst FileUploader = () => {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [fileContents, setFileContents] = useState({});\n\n  const handleFileChange = async (event) => {\n    const files = Array.from(event.target.files);\n    setSelectedFiles(files);\n\n    const contents = {};\n    for (const file of files) {\n      if (file.type === 'application/pdf') {\n        contents[file.name] = await extractTextFromPDF(file);\n      } else if (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        contents[file.name] = await extractTextFromWord(file);\n      }\n    }\n    setFileContents(contents);\n  };\n\n  const extractTextFromPDF = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const typedarray = new Uint8Array(reader.result);\n\n        pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n        const pdf = await pdfjsLib.getDocument(typedarray).promise;\n        let text = '';\n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const content = await page.getTextContent();\n          text += content.items.map(item => item.str).join(' ');\n        }\n        resolve(text);\n      };\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  const extractTextFromWord = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = async (event) => {\n        const arrayBuffer = event.target.result;\n        try {\n          const result = await mammoth.extractRawText({ arrayBuffer });\n          resolve(result.value);\n        } catch (err) {\n          reject(err);\n        }\n      };\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 p-4\">\n      <div className=\"max-w-md w-full bg-white shadow-md rounded-lg p-6\">\n        <h2 className=\"text-2xl font-semibold mb-4\">Upload Word or PDF Files</h2>\n        <input\n          type=\"file\"\n          accept=\".doc,.docx,.pdf\"\n          onChange={handleFileChange}\n          className=\"block w-full text-sm text-gray-500\n                     file:mr-4 file:py-2 file:px-4\n                     file:rounded-full file:border-0\n                     file:text-sm file:font-semibold\n                     file:bg-blue-50 file:text-blue-700\n                     hover:file:bg-blue-100\n                     mb-4\"\n          multiple\n        />\n        <ul className=\"list-disc list-inside\">\n          {selectedFiles.map((file, index) => (\n            <li key={index} className=\"text-gray-700\">{file.name}</li>\n          ))}\n        </ul>\n        <div className=\"mt-4\">\n          {Object.entries(fileContents).map(([fileName, content]) => (\n            <div key={fileName} className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold\">{fileName}</h3>\n              <p className=\"text-gray-700 whitespace-pre-line\">{content}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}